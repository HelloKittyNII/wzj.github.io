{"meta":{"title":"nii's blogs","subtitle":"","description":"一切都是最好的安排！","author":"不忘初心","url":"https://niiblog.com","root":"/"},"pages":[{"title":"categories","date":"2020-05-31T04:40:30.000Z","updated":"2020-05-31T04:40:30.109Z","comments":true,"path":"categories/index-1.html","permalink":"https://niiblog.com/categories/index-1.html","excerpt":"","text":""},{"title":"categories","date":"2020-05-24T13:48:33.000Z","updated":"2020-05-31T04:43:58.156Z","comments":true,"path":"categories/index.html","permalink":"https://niiblog.com/categories/index.html","excerpt":"","text":""},{"title":"像树一样成长","date":"2020-05-31T04:42:50.000Z","updated":"2020-05-31T10:20:13.929Z","comments":true,"path":"about/index.html","permalink":"https://niiblog.com/about/index.html","excerpt":"","text":"人是可以由草变成树的，因为人的心灵就是种子。 人的生活方式有两种： 第一种方式是像草一样，尽管活着，每年还在成长，但是你毕竟是一颗草，你吸收雨露阳光，但是长不大。人们可以踩过你，但是人们不会因为你的痛苦，而产生痛苦。人们不会因为你被踩了，而来怜悯你，因为他们本身就没有看到你。 当你是地平线上的一颗小草的时候，有什么理由要求别人在遥远的地方就看见你？即使走近了，别人也可能会不看你，甚至会无意中一脚把这棵草踩在脚下。 所以我们每一个人，都应该像树一样的成长。当你长成参天大树以后，遥远的地方，人们就能看到你；走近你，你能给人一片绿色。活着是美丽的风景，死了依然是栋梁之才。 而人是可以由草变成树的，因为人的心灵就是种子。 假如你的心灵是草的种子，你就是一棵永远被人践踏的小草。假如你的心灵是一棵树的种子，就算被人踩到了泥土里，你依然能够吸收泥土的养分，自己成长起来，早晚有一天会成为参天大树。 不管你是白杨还是松树，人们在遥远的地方都能看见在地平线上成长的你。当人们从你身边经过的时候，你能送他们一片绿色、一片阴凉，他们能在树下休息。 生命是一条河流，愿你做河水，一路奔腾入海。 每一条河流都有自己不同的生命曲线，但是每一条河流都有自己的梦想，那就是奔向大海。生命是一条河流，要永远保持流动。河流有两种成分，一种是泥沙，一种是水。 如果你是泥沙，你可能慢慢地就会沉淀，一旦沉淀下去，也许你就不再会为了前进而努力，但是却永远也见不到阳光了。所以一定要有水的精神，像水一样不断积蓄力量，不断冲破障碍。当你发现时机不到的时候，把厚度积累起来；当有一天时机来临的时候，你就能够奔腾入海，成就自己的生命。 希望所有的人不要把自己变成泥沙，因为变成泥沙，你的生命就会沉淀下去，就会永远停滞；假如你是水，就必然会流向大海。否则，就再也看不到阳光，再也看不到生命中最辉煌的时刻。 联系方式：1291924229@qq.com"},{"title":"tags","date":"2020-05-31T04:40:02.000Z","updated":"2020-05-31T04:44:13.433Z","comments":true,"path":"tags/index.html","permalink":"https://niiblog.com/tags/index.html","excerpt":"","text":""},{"title":"schedule","date":"2020-05-31T04:55:39.000Z","updated":"2020-05-31T04:56:12.191Z","comments":true,"path":"schedule/index.html","permalink":"https://niiblog.com/schedule/index.html","excerpt":"","text":""}],"posts":[{"title":"浅谈分布式系统FailOver","slug":"浅谈分布式系统FailOver","date":"2020-05-31T09:22:15.000Z","updated":"2020-05-31T09:55:55.853Z","comments":true,"path":"2020/05/31/浅谈分布式系统FailOver/","link":"","permalink":"https://niiblog.com/2020/05/31/%E6%B5%85%E8%B0%88%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9FFailOver/","excerpt":"概述根据百度百科的词条描述，失败转移（FailOver）是指一种备份操作模式，当系统的主要组件由于失效或预定关机时间的原因而无法工作时，这种模式的系统组件功能被转嫁到二级系统组件中。 简单来讲就是当分布式系统中的某个组件出现问题，能够立马切换到新的节点继续进行工作，而不会直接导致整个系统宕机。","text":"概述根据百度百科的词条描述，失败转移（FailOver）是指一种备份操作模式，当系统的主要组件由于失效或预定关机时间的原因而无法工作时，这种模式的系统组件功能被转嫁到二级系统组件中。 简单来讲就是当分布式系统中的某个组件出现问题，能够立马切换到新的节点继续进行工作，而不会直接导致整个系统宕机。 #具体措施在真实的环境中我们可以通过几个方面来未雨绸缪，防范系统可能出现的故障，降低系统风险 存储层不管系统存储使用的是关系型数据库（MySQL、Orcale）或非关系型数据库（Redis、MongoDB、Hbase），都可以采用备库的方式进行解决，当主库出现问题，可以立即切换到从库，保证业务的连续型。 中间件层一般系统中使用的中间件，都是以集群的方式存在，当系统的一个节点出现问题，通过负载均衡可以立即切换节点，举几个例子： 一般申请缓存tair，可以申请两个机房，防止某个机房出现问题 当zookeeper的master节点挂掉，系统可以重新选取主节点 服务器假设某应用的集群服务器是20台，当某台服务器出现问题（比如内存泄漏），会立即被踢出，保证整个集群服务的正确性。做的好的话，集群可以有自愈功能，当某台机器下线，会自动上线一台服务。 另一方面，某个应用的服务器不会部署到一个机房，会零散的分布在几个机房中，这样可以提高系统的容灾，降低风险。 编码方面假设一个系统依赖了20个其他的应用，我们会对每一个业务场景进行分析，每一个应用是强依赖或者是弱依赖，对弱依赖的应用，我们要做好防护，设置好超时时间，并做好兜底策略，假设下游系统宕机，从代码层面会将业务功能进行转移。","categories":[{"name":"分布式","slug":"分布式","permalink":"https://niiblog.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"}],"tags":[{"name":"系统设计","slug":"系统设计","permalink":"https://niiblog.com/tags/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"}]},{"title":"系统设计（一）优秀的代码.md","slug":"系统设计（一）优秀的代码","date":"2020-05-31T08:46:51.000Z","updated":"2020-05-31T09:56:25.974Z","comments":true,"path":"2020/05/31/系统设计（一）优秀的代码/","link":"","permalink":"https://niiblog.com/2020/05/31/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%B8%80%EF%BC%89%E4%BC%98%E7%A7%80%E7%9A%84%E4%BB%A3%E7%A0%81/","excerpt":"一个优秀的架构师必须是一个优秀的coder，首先代码代码整洁可读高，再者系统功能横向和纵向扩展性好、运行效率高。 前言一个应用系统新建之初，就必须有一个编码规范，指导团队相关同学日常开发，编码规范可以包含如下几部分，另外可以有bad case 和bad case样板间，指导团队同学开发。","text":"一个优秀的架构师必须是一个优秀的coder，首先代码代码整洁可读高，再者系统功能横向和纵向扩展性好、运行效率高。 前言一个应用系统新建之初，就必须有一个编码规范，指导团队相关同学日常开发，编码规范可以包含如下几部分，另外可以有bad case 和bad case样板间，指导团队同学开发。 系统对外接口规范（出参、入参） 命名规范（函数、方法、类、枚举、常量） 系统分层规范，每一层的入参、出参规范，包命名规范 日志打印规范（非常重要），可以分为拦截器打印和手动打印 配置使用 运维规范（熔断配置、限流配置） 消息使用规范（kafka、msgbroker） 异常处理规范（异常范围、使用场景） 注释（变量、类、方法） 格式化规则 必须使用Java8 代码整洁之道下面xmind下载地址https://github.com/HelloKittyNII/Knowledge-Library/tree/master/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1 设计模式","categories":[{"name":"架构师之路","slug":"架构师之路","permalink":"https://niiblog.com/categories/%E6%9E%B6%E6%9E%84%E5%B8%88%E4%B9%8B%E8%B7%AF/"}],"tags":[{"name":"系统设计","slug":"系统设计","permalink":"https://niiblog.com/tags/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"},{"name":"编码规范","slug":"编码规范","permalink":"https://niiblog.com/tags/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"}]}],"categories":[{"name":"分布式","slug":"分布式","permalink":"https://niiblog.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"},{"name":"架构师之路","slug":"架构师之路","permalink":"https://niiblog.com/categories/%E6%9E%B6%E6%9E%84%E5%B8%88%E4%B9%8B%E8%B7%AF/"}],"tags":[{"name":"系统设计","slug":"系统设计","permalink":"https://niiblog.com/tags/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"},{"name":"编码规范","slug":"编码规范","permalink":"https://niiblog.com/tags/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"}]}